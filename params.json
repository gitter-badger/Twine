{"name":"Twine","tagline":"An open-source tool for telling interactive, nonlinear stories.","body":"twinejs\r\n-------\r\n\r\nby Chris Klimas, Leon Arnott, Daithi O Crualaoich, Ingrid Cheung, Thomas\r\nMichael Edwards, Micah Fitch, Juhana Leinonen, and Ross Smith\r\n\r\n### SYNOPSIS\r\n\r\nThis is a port of Twine to a local browser-based app. See\r\n[twinery.org](http://twinery.org) for more info.\r\n\r\nThe story formats in minified format under `storyformats/` exist in separate\r\nrepositories:\r\n\r\n* [Harlowe](https://bitbucket.org/_L_/harlowe)\r\n* [Snowman](https://bitbucket.org/klembot/snowman-2)\r\n* [Paperthin](https://bitbucket.org/klembot/paperthin)\r\n\r\n### INSTALL\r\n\r\nRun `npm install` at the top level of the directory to install all goodies.\r\n\r\nYou'll need [Grunt](http://gruntjs.com) to continue. Run `npm install -g grunt`\r\n(you will need to have administrator privileges to achieve this task).\r\n\r\n### BUILDING\r\n\r\nRun `grunt` to perform a basic build under `build/standalone`; `grunt dev` will\r\nperform the same tasks whenever you make changes to the source code. `grunt nw`\r\nwill create executable app versions of Twine from this directory and place them\r\nunder `build/nwjs/`. `grunt build:cdn` will build a version of Twine that makes\r\nas much use of CDN resources as possible, and place it under `build/cdn`.\r\n\r\nTo create downloadable versions of Twine, run `grunt package`. These will be\r\nplaced in the `dist/` directory. An additional file named `2.json` is created\r\nunder `dist/`. This contains information relevant to the autoupdater process, and\r\nis currently posted to http://twinery.org/latestversion/2.json.\r\n\r\nIn order to build Windows apps on OS X or Linux, you will need to have\r\n[Wine](https://www.winehq.org/) and [makensis](http://nsis.sourceforge.net/) installed.\r\n\r\n### TESTING\r\n\r\nRun `grunt test` to run through Selenium-based tests (for now, these only run on\r\nFirefox). To quit a test run as soon as any error is encountered, run `grunt\r\ntest --bail`. To run a subset of tests, run `grunt test --grep=mysearch`. Only\r\ntests whose name match the argument you pass will be run.\r\n\r\n### LOCALIZATION\r\n\r\nWould you like to help localize Twine for another language? Awesome! You don't\r\nneed to know JavaScript to do so. Here's how it works:\r\n\r\n1. Download\r\n[template.pot](https://bitbucket.org/klembot/twinejs/raw/4b64592fd47dd6678d9d0ebb0f07067f1bfaeabb/locale/po/template.pot)\r\nfrom the repository.\r\n\r\n2. Use a translation application like [Poedit](http://poedit.net/) to create a\r\n.po file with the source text translated. If you are using Poedit, get started\r\nby choosing **New from POT/PO File** from the **File** menu. Make sure to name\r\nyour po file according to the [IETF locale naming\r\nconvention](https://en.wikipedia.org/wiki/IETF_language_tag) -- Poedit can help\r\nsuggest that as well. For example, a generic French translation should be named\r\n`fr.po`, while an Australian English one would be named `en-au.po`.\r\n\r\n3. Finally, two other things are needed: an SVG-formatted image of the flag\r\nthat should be associated with your language, and what native speakers call the\r\nlanguage you are localizing to (e.g. Fran&ccedil;ais for French speakers).\r\n[Wikimedia\r\nCommons](https://commons.wikimedia.org/wiki/Category:SVG_flags_by_country) is\r\nyour best bet for nice-looking SVG flags. Obviously, whatever image you provide\r\nmust either be in the public domain or otherwise OK to use in Twine without any\r\ncompensation.\r\n\r\n4. If you're comfortable using Mercurial, then you can open a pull request to\r\nhave your localization added. Please place it in the `src/locale/po` directory. If\r\nyou aren't, you can instead open a bug tracker issue and attach your PO file,\r\nflag image, and language name and we'll take it from there.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}